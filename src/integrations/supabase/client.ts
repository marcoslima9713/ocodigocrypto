// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Configurações de fallback apenas em desenvolvimento, nunca em produção
const fallbackSupabaseUrl = "https://wvojbjkdlnvlqgjwtdaf.supabase.co";
const fallbackSupabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind2b2piamtkbG52bHFnanF3dGRhZiIsInJvbGUiOiJhbm9uIiwiaWF0IjoxNzM1NzI5NzE5LCJleHAiOjIwNTEzMDU3MTl9.juWlSIl6oLFH43Ii39TQ1p55scz04uhDj0TVjNduH0k";

const isDev = import.meta.env.DEV === true;
const SUPABASE_URL =
  (import.meta.env.VITE_SUPABASE_URL as string | undefined) || (isDev ? fallbackSupabaseUrl : undefined);
const SUPABASE_PUBLISHABLE_KEY =
  (import.meta.env.VITE_SUPABASE_ANON_KEY as string | undefined) || (isDev ? fallbackSupabaseKey : undefined);

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Variáveis de ambiente do Supabase ausentes. Configure VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true, // Persistir sessão para manter usuário autenticado após reload
    autoRefreshToken: true, // Renovar token automaticamente
    detectSessionInUrl: false,
  }
});

// Função para atualizar o header Authorization dinamicamente
export async function setSupabaseAuthToken(token: string) {
  // Mantida para compatibilidade; o app usa apenas Supabase Auth
  // No momento não há necessidade de atualizar manualmente a sessão
}

// Função para limpar completamente a sessão de autenticação
export async function clearAuthSession() {
  try {
    // Fazer logout do Supabase
    await supabase.auth.signOut();
  } catch (error) {
    console.warn('Erro no logout do Supabase:', error);
  }
  
  // Limpar localStorage manualmente
  try {
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
      if (key.includes('supabase') || key.includes('sb-')) {
        localStorage.removeItem(key);
      }
    });
  } catch (error) {
    console.warn('Erro ao limpar localStorage:', error);
  }
  
  // Limpar sessionStorage também
  try {
    const keys = Object.keys(sessionStorage);
    keys.forEach(key => {
      if (key.includes('supabase') || key.includes('sb-')) {
        sessionStorage.removeItem(key);
      }
    });
  } catch (error) {
    console.warn('Erro ao limpar sessionStorage:', error);
  }
}